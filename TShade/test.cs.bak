// imports
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using ReLogic.Content;
using Terraria;
using Terraria.ID;
using Terraria.GameContent.Drawing;
using Terraria.Graphics.Effects;
using Terraria.Graphics.Light;
using Terraria.ModLoader;
using Terraria.ModLoader.Config;

namespace test 
{
	public class test : Mod 
	{
		// variables
		public static bool useLight = true;
		public static bool useBloom = true;
		public static float LightIntensity = 1f;
		public static float ShadowIntensity = 1f;
		public static float bloomIntensity = 1f;
		public static float MoonLightIntensity;
		public static bool fasttime = false;
		public RenderTarget2D screen;
		public RenderTarget2D light;
		public RenderTarget2D bloom;
		public RenderTarget2D cloud;
		public static Effect Light;
		public static Effect Shadow;
		public static Effect Bloom;
		public static int quality = 1;

		public override void Load()
		{
			if (!Main.dedServ)
			{
				Light = ModContent.Request<Effect>("test/Effects/Light", (AssetRequestMode)2).Value;
				Shadow = ModContent.Request<Effect>("test/Effects/Shadow", (AssetRequestMode)2).Value;
				Bloom = ModContent.Request<Effect>("test/Effects/Bloom1", (AssetRequestMode)2).Value;
				Terraria.Graphics.Effects.FilterManager.EndCapture += FilterManager_EndCapture;
				On.Terraria.Main.LoadWorlds += Main_LoadWorlds;
				Main.OnResolutionChanged += Main_OnResolutionChanged;
			}
		}

		public override void PostSetupContent()
		{
			if (!Main.dedServ)
			{
				Light = ModContent.Request<Effect>("test/Effects/Light", (AssetRequestMode)2).Value;
				Shadow = ModContent.Request<Effect>("test/Effects/Shadow", (AssetRequestMode)2).Value;
				Bloom = ModContent.Request<Effect>("test/Effects/Bloom1", (AssetRequestMode)2).Value;
			}
		}

		public override void Unload()
		{
			Terraria.Graphics.Effects.FilterManager.EndCapture -= FilterManager_EndCapture;
			Terraria.Main.LoadWorlds -= Main_LoadWorlds;
			Light = null;
			Shadow = null;
			Bloom = null;
			screen = null;
			light = null;
			bloom = null;
		}

		private void Main_LoadWorlds(Terraria.Main.orig_LoadWorlds orig)
		{
			orig();
			if (screen == null)
			{
				GraphicsDevice gd = Main.instance.GraphicsDevice;
				screen = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				light = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth, gd.PresentationParameters.BackBufferHeight, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				bloom = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				cloud = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
			}
		}

		private void Main_OnResolutionChanged(Vector2 obj)
		{
			screen = new RenderTarget2D(Main.instance.GraphicsDevice, Main.screenWidth / 3, Main.screenHeight / 3);
			light = new RenderTarget2D(Main.instance.GraphicsDevice, Main.screenWidth, Main.screenHeight);
			bloom = new RenderTarget2D(Main.instance.GraphicsDevice, Main.screenWidth / 3, Main.screenHeight / 3);
		}

		private void FilterManager_EndCapture(Terraria.Graphics.Effects.FilterManager.orig_EndCapture orig, FilterManager self, RenderTarget2D finalTexture, RenderTarget2D screenTarget1, RenderTarget2D screenTarget2, Color clearColor)
		{
			GraphicsDevice gd = Main.instance.GraphicsDevice;
			SpriteBatch sb = Main.spriteBatch;
			if (Main.myPlayer >= 0)
			{
				if (screen == null)
				{
					screen = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
					light = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth, gd.PresentationParameters.BackBufferHeight, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
					bloom = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
					cloud = new RenderTarget2D(gd, gd.PresentationParameters.BackBufferWidth / 3, gd.PresentationParameters.BackBufferHeight / 3, false, gd.PresentationParameters.BackBufferFormat, (DepthFormat)0);
				}
				if (useBloom)
				{
					UseBloom(gd);
				}
				if (useLight)
				{
					UseLightAndShadow(gd, sb);
				}
			}
			orig.Invoke(self, finalTexture, screenTarget1, screenTarget2, clearColor);
		}

		private void UseBloom(GraphicsDevice graphicsDevice)
		{
			graphicsDevice.SetRenderTarget(Main.screenTargetSwap);
			graphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin((SpriteSortMode)0, BlendState.AlphaBlend);
			Main.spriteBatch.Draw((Texture2D)(object)Main.screenTarget, Vector2.Zero, Color.White);
			Main.spriteBatch.End();
			graphicsDevice.SetRenderTarget(screen);
			graphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
			Bloom.CurrentTechnique.Passes[0].Apply();
			Bloom.Parameters["m"].SetValue(0.68f - bloomIntensity * 0.02f);
			Main.spriteBatch.Draw((Texture2D)(object)Main.screenTarget, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 0.333f, (SpriteEffects)0, 0f);
			Main.spriteBatch.End();
			Main.spriteBatch.Begin((SpriteSortMode)1, BlendState.AlphaBlend);
			Bloom.Parameters["uScreenResolution"].SetValue(new Vector2((float)(Main.screenWidth / 3), (float)(Main.screenHeight / 3)));
			Bloom.Parameters["uRange"].SetValue(1f);
			Bloom.Parameters["uIntensity"].SetValue(1.02f);
			for (int i = 0; i < 4; i++)
			{
				Bloom.CurrentTechnique.Passes["GlurV"].Apply();
				graphicsDevice.SetRenderTarget(bloom);
				graphicsDevice.Clear(Color.Transparent);
				Main.spriteBatch.Draw((Texture2D)(object)screen, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
				Bloom.CurrentTechnique.Passes["GlurV"].Apply();
				graphicsDevice.SetRenderTarget(screen);
				graphicsDevice.Clear(Color.Transparent);
				Main.spriteBatch.Draw((Texture2D)(object)bloom, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			}
			Main.spriteBatch.End();
			graphicsDevice.SetRenderTarget(Main.screenTarget);
			graphicsDevice.Clear(Color.Transparent);
			Main.spriteBatch.Begin((SpriteSortMode)1, BlendState.Additive);
			Bloom.CurrentTechnique.Passes["Blend"].Apply();
			Bloom.Parameters["tex0"].SetValue((Texture)(object)Main.screenTargetSwap);
			Bloom.Parameters["p"].SetValue(3);
			Bloom.Parameters["m2"].SetValue(1.5f * bloomIntensity);
			Main.spriteBatch.Draw((Texture2D)(object)screen, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 3f, (SpriteEffects)0, 0f);
			Main.spriteBatch.End();
		}

		public static void SetQuality(int q)
		{
			if (quality != q)
			{
				quality = q;
			}
		}

		private float Gauss(float x, float sigma)
		{
			return 0.39894f * (float)Math.Exp((double)(-0.5f * x * x / (0.2f * sigma)));
		}

		private void UseLightAndShadow(GraphicsDevice gd, SpriteBatch sb)
		{
			gd.SetRenderTarget(Main.screenTargetSwap);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)0, BlendState.AlphaBlend);
			sb.Draw((Texture2D)(object)Main.screenTarget, Vector2.Zero, Color.White);
			sb.End();
			gd.SetRenderTarget(light);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)1, BlendState.NonPremultiplied);
			Light.CurrentTechnique.Passes["Light"].Apply();
			Light.Parameters["uScreenResolution"].SetValue(new Vector2((float)Main.screenWidth, (float)Main.screenHeight));
			Light.Parameters["uPos"].SetValue(ToScreenCoords(GetSunPos()));
			Light.Parameters["tex0"].SetValue((Texture)(object)ModContent.Request<Texture2D>("test/" + (Main.dayTime ? "ColorTex" : "ColorTex2"), (AssetRequestMode)2).Value);
			Color c = Main.ColorOfTheSkies;
			float intensity = 1f - 1.2f * ((float)(int)((Color)(c)).R * 0.3f + (float)(int)((Color)(c)).G * 0.6f + (float)(int)((Color)(c)).B * 0.1f) / 255f;
			float num = 1.1f * LightIntensity;
			if (Main.LocalPlayer.ZoneSnow && !Main.LocalPlayer.ZoneCrimson && !Main.LocalPlayer.ZoneCorrupt)
			{
				intensity -= Main.bgAlphaFrontLayer[7] * 0.1f;
			}
			if (Main.LocalPlayer.ZoneCrimson)
			{
				intensity += 0.2f;
			}
			if (Main.snowBG[0] == 263 || Main.snowBG[0] == 258 || Main.snowBG[0] == 267)
			{
				intensity -= Main.bgAlphaFrontLayer[7] * 1f;
			}
			if (Main.desertBG[0] == 248)
			{
				intensity -= Main.bgAlphaFrontLayer[2] * 0.6f;
			}
			float moonlightI = 1f;
			if (Main.moonPhase == 0)
			{
				moonlightI = 1.01f;
			}
			if (Main.moonPhase == 3 || Main.moonPhase == 5)
			{
				moonlightI = 0.9f;
			}
			if (Main.moonPhase == 4)
			{
				moonlightI = 0.6f;
			}
			float finalIntens = num * (0.75f + intensity * 0.2f);
			Light.Parameters["intensity"].SetValue(Main.dayTime ? finalIntens : (MoonLightIntensity * moonlightI));
			Light.Parameters["t"].SetValue((float)Main.time / 54000f);
			if (!Main.dayTime)
			{
				Light.Parameters["t"].SetValue((float)Main.time / 32400f);
			}
			if ((double)((Entity)Main.LocalPlayer).Center.Y < Main.worldSurface * 16.0 + 800.0)
			{
				sb.Draw(ModContent.Request<Texture2D>("test/PixelEX", (AssetRequestMode)2).Value, new Rectangle(0, 0, Main.screenWidth, Main.screenHeight), Color.White);
			}
			sb.End();
			gd.SetRenderTarget(screen);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)1, BlendState.Additive);
			Shadow.CurrentTechnique.Passes[0].Apply();
			Shadow.Parameters["uScreenResolution"].SetValue(new Vector2((float)Main.screenWidth, (float)Main.screenHeight));
			float desertI = Main.bgAlphaFrontLayer[2] * 0.1f;
			if (Main.desertBG[0] == 248)
			{
				desertI = 0f;
			}
			Shadow.Parameters["m"].SetValue(1f - desertI);
			if (!Main.dayTime)
			{
				Shadow.Parameters["m"].SetValue(0.02f);
			}
			Shadow.Parameters["uPos"].SetValue(ToScreenCoords(GetSunPos()));
			sb.Draw((Texture2D)(object)Main.screenTarget, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 0.333f, (SpriteEffects)0, 0f);
			sb.End();
			gd.SetRenderTarget(Main.screenTarget);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)0, BlendState.Additive);
			if (Main.dayTime)
			{
				for (int j = 0; j < quality * 10; j++)
				{
					float shaderIntens2 = (float)(quality * 18) * (1f + (float)quality * 0.16f);
					if (Main.snowBG[0] == 263 || Main.snowBG[0] == 258 || Main.snowBG[0] == 267)
					{
						shaderIntens2 -= Main.bgAlphaFrontLayer[7] * 30f;
					}
					float a2 = (float)(quality * 10 - j) / shaderIntens2;
					sb.Draw((Texture2D)(object)screen, GetSunPos() / 3f, (Rectangle?)null, Color.White * a2 * (ShadowIntensity + 0.2f) * (finalIntens * 0.9f - 0.1f), 0f, GetSunPos() / 3f, 1f * (1f + (float)j * (1f / (float)quality) * (0.015f + (float)quality * 0.01f)), (SpriteEffects)0, 0f);
				}
			}
			else
			{
				for (int i = 0; i < 20; i++)
				{
					float shaderIntens = 195f;
					float a = (20f - (float)i) / shaderIntens;
					sb.Draw((Texture2D)(object)screen, GetSunPos() / 3f, (Rectangle?)null, Color.White * a, 0f, GetSunPos() / 3f, 1f * (1f + (float)i * 0.015f), (SpriteEffects)0, 0f);
				}
			}
			sb.End();
			gd.SetRenderTarget(screen);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)0, BlendState.AlphaBlend);
			sb.Draw((Texture2D)(object)Main.screenTarget, Vector2.Zero, (Rectangle?)null, Color.White, 0f, Vector2.Zero, 1f, (SpriteEffects)0, 0f);
			sb.End();
			gd.SetRenderTarget(Main.screenTarget);
			gd.Clear(Color.Transparent);
			sb.Begin((SpriteSortMode)0, BlendState.Additive);
			sb.Draw((Texture2D)(object)Main.screenTargetSwap, Vector2.Zero, Color.White);
			sb.End();
			sb.Begin((SpriteSortMode)1, BlendState.Additive);
			Shadow.CurrentTechnique.Passes[1].Apply();
			Shadow.Parameters["tex0"].SetValue((Texture)(object)screen);
			sb.Draw((Texture2D)(object)light, Vector2.Zero, Color.White);
			sb.End();
		}

		public static Vector2 ToScreenCoords(Vector2 vec)
		{
			return vec / new Vector2((float)Main.screenWidth, (float)Main.screenHeight);
		}

		public Vector2 GetSunPos()
		{
			// re-used code from the dynamic lights mod
			float bgTop = (int)((0.0 - (double)Main.screenPosition.Y) / (Main.worldSurface * 16.0 - 600.0) * 200.0);
			float height = 0;
			if (Main.dayTime)
			{
				if (Main.time < 27000.0)
				{
					height = bgTop + (float)Math.Pow(1.0 - Main.time / 54000.0 * 2.0, 2.0) * 250.0f + 180.0f;
				}
				else
				{
					height = bgTop + (float)Math.Pow((Main.time / 54000.0 - 0.5) * 2.0, 2.0) * 250.0f + 180.0f;
				}
			}
			return new Vector2((float)Main.time / (Main.dayTime ? 54000.0f : 32400.0f) * (float)(Main.screenWidth + 200f) - 100f, height + Main.sunModY);
		}
	}
}